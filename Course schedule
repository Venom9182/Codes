class Solution {
public:
    int count = 0;
    bool dfs(int node, vector<pair<int, int>> &visited, vector<int> adj[]) {
        visited[node].first = 1; // mark as visited
        visited[node].second = 1; // mark as part of the current path
  

        for (auto it : adj[node]) {
            if (!visited[it].first) {
                if(dfs(it, visited, adj)) return true;
            } else if (visited[it].second) {
                return true; // cycle detected
            }
        }

        count++;
        visited[node].second = 0; // remove from the current path
        return false;
    }

    bool canFinish(int numCourses, vector<vector<int>>& graph) {
        int V = graph.size();
        vector<pair<int, int>> visited(numCourses, {0, 0});
        vector<int> check(numCourses, 0);
        vector<int> adj[numCourses];


        for(auto it : graph) {
            adj[it[1]].push_back(it[0]);
        }

        for (int i = 0; i < numCourses; i++) {
            if (!visited[i].first) {
                if(dfs(i, visited, adj)) return false;
            }
        }
        return count == numCourses;
    }
};
